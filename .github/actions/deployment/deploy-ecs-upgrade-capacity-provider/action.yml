name: Upgrade ECS Service to Capacity Provider Strategy from Launch Type
description: Deploy a new version of an ECS service with built-in upgraded capacity provider, as this is default from
  terraform-aws-ecs-service v2 and onwards.

inputs:
  ecs-cluster-name:
    description: "The name of the ECS Cluster"
    required: true
  ecs-service-name:
    description: "The name of the ECS Service"
    required: true

runs:
  using: composite
  steps:
    - name: Check if needed to update Capacity Provider Strategy
      id: check
      shell: bash
      run: |
        echo "Checking current Capacity Provider Strategy for ECS Service ${{ inputs.ecs-service-name }} in cluster ${{ inputs.ecs-cluster-name }}..."
        STRATEGY_COUNT=$(aws ecs describe-services \
            --cluster "${{ inputs.ecs-cluster-name }}" \
            --services "${{ inputs.ecs-service-name }}" \
            --query "length(services[0].capacityProviderStrategy || \`[]\`)" \
            --output text)
        
        echo "Capacity Provider Strategy count: $STRATEGY_COUNT"
        
        if [[ "$STRATEGY_COUNT" == "0" ]]; then
          echo "Does not use Capacity Provider Strategy. Update needed."
          echo "update_needed=true" >> $GITHUB_OUTPUT
        else
          echo "Capacity Provider Strategy already in use. No update needed."
          echo "update_needed=false" >> $GITHUB_OUTPUT
        fi
    - name: Update ECS Service to use the new Capacity Provider Strategy
      if: ${{ steps.check.outputs.update_needed == 'true' }}
      shell: bash
      run: |
        echo "Updating ECS Service ${{ inputs.ecs-service-name }} in cluster ${{ inputs.ecs-cluster-name }} to use Capacity Provider Strategy..."
        aws ecs update-service \
          --cluster "${{ inputs.ecs-cluster-name }}" \
          --service "${{ inputs.ecs-service-name }}" \
          --capacity-provider-strategy=capacityProvider=FARGATE,base=0,weight=1 \
          --force-new-deployment
        
        echo "ECS Service updated successfully."
    - name: Wait for ECS Service stability
      if: ${{ steps.check.outputs.update_needed == 'true' }}
      shell: bash
      run: |
        echo "Waiting for ECS Service ${{ inputs.ecs-service-name }} in cluster ${{ inputs.ecs-cluster-name }} to stabilize..."
        aws ecs wait services-stable \
          --cluster "${{ inputs.ecs-cluster-name }}" \
          --services "${{ inputs.ecs-service-name }}"
        
        echo "ECS Service is now stable."
