inputs:
  function-name:
    description: "The name of the Lambda Function"
    required: true
  s3-bucket:
    description: "The bucket with the artifact"
    required: true
  s3-folder:
    description: "The path of the artifact"
    required: true
  codedeploy-application-name:
    description: "The CodeDeploy Application Name"
    required: true
  codedeploy-deployment-group-name:
    description: "The CodeDeploy Deployment Group Name"
    required: true
  aws-region:
    description: "The AWS Region to use for the deployment"
    required: true
    default: "eu-west-1"

runs:
  using: composite
  steps:
    - name: Get Current Lambda Version
      id: get-current-version
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        LAMBDA_NAME="${{ inputs.function-name }}"
        CURRENT_LAMBDA_VERSION=$(aws lambda get-alias --function-name $LAMBDA_NAME --name active --query 'FunctionVersion' --output text)
        if [ "$CURRENT_LAMBDA_VERSION" == "$LATEST" ]; then
          echo "No valid active alias for Lambda function $LAMBDA_NAME. Setting current version to 1."
          CURRENT_LAMBDA_VERSION="1"
        fi
        echo "current_lambda_version=$CURRENT_LAMBDA_VERSION" >> $GITHUB_OUTPUT

    - name: Publish Lambda Version
      id: publish
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        LAMBDA_NAME="${{ inputs.function-name }}"
        S3_BUCKET="${{ inputs.s3-bucket }}"
        S3_FOLDER="${{ inputs.s3-folder }}"
        # SHA="${{ github.event.pull_request.head.sha || github.sha }}"
        # TODO: Add support for sha deployment, now it is main branch
        S3_KEY="${S3_FOLDER}"
        
        NEW_LAMBDA_VERSION=$(aws lambda update-function-code --function-name $LAMBDA_NAME --s3-bucket $S3_BUCKET --s3-key $S3_KEY --query 'Version' --publish --output text)
        
        echo "new_lambda_version=$NEW_LAMBDA_VERSION" >> $GITHUB_OUTPUT

    - name: Generate AppSpec File
      shell: bash
      run: |
        cat <<EOF > appspec.yml
        applicationName: ${{ inputs.codedeploy-application-name }}
        deploymentGroupName: ${{ inputs.codedeploy-deployment-group-name }}
        revision:
          revisionType: AppSpecContent
          appSpecContent:
            content: |
              version: 0.0
              Resources:
                - TargetService:
                    Type: "AWS::Lambda::Function"
                    Properties:
                      Name: "${{ inputs.function-name }}"
                      Alias: "active"
                      CurrentVersion: "${{ steps.get-current-version.outputs.current_lambda_version }}"
                      TargetVersion: "${{ steps.publish.outputs.new_lambda_version }}"
        EOF

    - name: Trigger CodeDeploy
      id: deploy
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        OUTPUT=$(aws deploy create-deployment --cli-input-yaml file://appspec.yml)
        DEPLOYMENT_ID=$(echo $OUTPUT | jq -r '.deploymentId')
        
        echo "DEPLOYMENT_ID=${DEPLOYMENT_ID}" >> $GITHUB_ENV

    - name: Wait for stability
      shell: bash
      env:
          AWS_REGION: ${{ inputs.aws-region }}
      run: |
        aws deploy wait deployment-successful --deployment-id ${{ env.DEPLOYMENT_ID }}

    - name: Cancel CodeDeploy Deployment and Fail
      if: cancelled()
      shell: bash
      env:
          AWS_REGION: ${{ inputs.aws-region }}
      run: |
        aws deploy stop-deployment --deployment-id ${{ env.DEPLOYMENT_ID }}
        exit 1
