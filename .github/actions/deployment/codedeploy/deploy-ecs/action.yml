name: Deploy Container via CodeDeploy

inputs:
  cluster-name:
    description: "The name of the ECS Cluster"
    required: true
  ecs-service-name:
    description: "The name of the ECS Service"
    required: true
  ecs-container-name:
    description: "The name of the ECS Container"
    required: true
  image-uri:
    description: "The image to deploy"
    required: true
  ecs-container-port:
    description: "The container port to use"
    required: true
  aws-account-id:
    description: "The AWS Account ID"
    required: true

runs:
  using: composite
  steps:
    - name: Create Amazon ECS task definition
      id: render
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        container-name: ${{ inputs.ecs-container-name }}
        task-definition-family: ${{ inputs.ecs-service-name }}
        image: ${{ inputs.image-uri }}

    - name: Deploy new task definition
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.render.outputs.task-definition }}
        service: ${{ inputs.ecs-service-name }}
        cluster: ${{ inputs.cluster-name }}

    - name: Output ECS URL with redirect
      id: output
      shell: bash
      run: |
        REDIRECT_URL="https://vygruppen.awsapps.com/start/#/console?account_id=${{ inputs.aws-account-id}}&destination="
        ECS_URL="https://console.aws.amazon.com/ecs/v2/clusters/${{inputs.cluster-name}}/services/${{inputs.ecs-service-name}}/deployments?region=eu-west-1"
        ENCODED_ECS_URL=$(jq -rn --arg v "$ECS_URL" '$v|@uri')
        echo "--- URLs to interact with AWS ---"
        echo "ECS console (to debug ECS errors): ${REDIRECT_URL}${ENCODED_ECS_URL}"

    - name: Monitor ECS Deployment Status
      shell: bash
      # language=bash
      run: |
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        CYAN='\033[0;36m'
        NC='\033[0m' # No Color
    
        echo "Monitoring ECS deployment..."
        LAST_EVENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        deadlockCounter=0;
        
        while true; do
          SERVICE=$(aws ecs describe-services --cluster ${{ inputs.cluster-name }} --services ${{ inputs.ecs-service-name }})
          
          # Check if we're using blue/green deployment (taskSets will be present)
          TASK_SETS_COUNT=$(echo "$SERVICE" | jq -r '.services[0].taskSets | length')
          
          if [ "$TASK_SETS_COUNT" -gt 0 ]; then
            # Blue/Green deployment - use taskSets
            echo "Blue/Green deployment detected (using taskSets)"
            
            # Get the primary task set (usually the one with the highest scale value)
            PRIMARY_TASK_SET=$(echo "$SERVICE" | jq -r '.services[0].taskSets | sort_by(.scale.value) | reverse | .[0]')
            COMPUTED_DESIRED_COUNT=$(echo "$PRIMARY_TASK_SET" | jq -r '.computedDesiredCount // 0')
            RUNNING_COUNT=$(echo "$PRIMARY_TASK_SET" | jq -r '.runningCount // 0')
            PENDING_COUNT=$(echo "$PRIMARY_TASK_SET" | jq -r '.pendingCount // 0')
            STABILITY_STATUS=$(echo "$PRIMARY_TASK_SET" | jq -r '.stabilityStatus // "UNKNOWN"')
            TASK_SET_ID=$(echo "$PRIMARY_TASK_SET" | jq -r '.id // "UNKNOWN"')
            EXTERNAL_ID=$(echo "$PRIMARY_TASK_SET" | jq -r '.externalId // "NONE"')
            
            echo -e "Deploy in progress. Refreshing in 15 seconds. (Try $((++deadlockCounter)))${NC}"
            echo -e "${BLUE}Computed Desired Count: $COMPUTED_DESIRED_COUNT, ${YELLOW}Pending Count: $PENDING_COUNT, ${GREEN}Running Count: $RUNNING_COUNT${NC}"
            echo -e "Task Set ID: $TASK_SET_ID, External ID: $EXTERNAL_ID"
            echo -e "Stability Status: $STABILITY_STATUS"
            
          # Check all task sets to see if there are multiple active ones during transition
          if [ "$TASK_SETS_COUNT" -gt 1 ]; then
            echo -e "${CYAN}Multiple task sets detected (Blue/Green deployment in progress)${NC}"
            echo "$SERVICE" | jq -r '.services[0].taskSets[] | "Task Set: \(.id) - Status: \(.status) - Stability: \(.stabilityStatus) - Running: \(.runningCount)/\(.computedDesiredCount)"'
          fi
          else
            # Standard deployment - use deployments as before
            PRIMARY_DEPLOYMENT=$(echo "$SERVICE" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY")')
            DESIRED_COUNT=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.desiredCount // 0')
            RUNNING_COUNT=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.runningCount // 0')
            PENDING_COUNT=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.pendingCount // 0')
            DEPLOYMENT_STATUS=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.rolloutState // "UNKNOWN"')
            DEPLOYMENT_REASON=$(echo "$PRIMARY_DEPLOYMENT" | jq -r '.rolloutStateReason // "No reason provided"')
            
            echo -e "Deploy in progress. Refreshing in 15 seconds. (Try $((++deadlockCounter)))${NC}"
            echo -e "${BLUE}Desired Count: $DESIRED_COUNT, ${YELLOW}Pending Count: $PENDING_COUNT, ${GREEN}Running Count: $RUNNING_COUNT${NC}"
            echo -e "Deployment status: $DEPLOYMENT_STATUS"
              
            if [ -n "$DEPLOYMENT_REASON" ] && [ "$DEPLOYMENT_REASON" != "No reason provided" ]; then
              echo -e "Deployment reason: $DEPLOYMENT_REASON"
            fi
          fi
          
          # Get and display events regardless of deployment type
          EVENTS_RESPONSE=$(aws ecs describe-services --cluster "${{ inputs.cluster-name }}" \
            --services "${{ inputs.ecs-service-name }}" \
            --query "services[*].events[?createdAt > \`$LAST_EVENT_DATE\`]" \
            --output json)
          
          TEMP_LAST_EVENT_DATE=$(echo "$EVENTS_RESPONSE" | jq -r '.[][0].createdAt // empty')
          
          if [ -n "$TEMP_LAST_EVENT_DATE" ]; then
           LAST_EVENT_DATE="$TEMP_LAST_EVENT_DATE"
          fi
          
          echo "$EVENTS_RESPONSE" | jq -r '.[][].message'
          
          # Check deployment status based on deployment type
          if [ "$TASK_SETS_COUNT" -gt 0 ]; then
            # For Blue/Green deployment
            if [[ "$STABILITY_STATUS" == "STEADY_STATE" ]]; then
              echo -e "${GREEN}✅ ECS Blue/Green Deployment reached STEADY_STATE!${NC}"
              break
            elif [[ "$STABILITY_STATUS" == "STABILIZING" ]]; then
              echo -e "${YELLOW}⏳ ECS Blue/Green Deployment is stabilizing...${NC}"
            elif [[ "$STABILITY_STATUS" == "FAILED" ]]; then
              echo -e "${RED}❌ ECS Blue/Green Deployment failed!${NC}"
              exit 1
            elif [[ "$RUNNING_COUNT" == "$COMPUTED_DESIRED_COUNT" && "$PENDING_COUNT" == "0" ]]; then
              # Additional check in case stabilityStatus is not reliable
              echo -e "${GREEN}✅ ECS Blue/Green Deployment appears to be complete. All tasks are running.${NC}"
              break
            fi
          else
          # For standard deployment
            if [[ "$DEPLOYMENT_STATUS" == "COMPLETED" ]]; then
              echo -e "${GREEN}✅ ECS Deployment completed successfully!${NC}"
              break
            elif [[ "$DEPLOYMENT_STATUS" == "FAILED" ]]; then
              echo -e "${RED}❌ ECS Deployment failed!${NC}"
              echo -e "Reason: $DEPLOYMENT_REASON"
              exit 1
            elif [[ "$RUNNING_COUNT" == "$DESIRED_COUNT" && "$PENDING_COUNT" == "0" ]]; then
              # Additional check in case rolloutState is not reliable
              echo -e "${GREEN}✅ ECS Deployment appears to be complete. All tasks are running.${NC}"
            break
            fi
          fi
          
          sleep 15
        done

    - name: Cancel CodeDeploy Deployment and Fail
      if: cancelled()
      shell: bash
      run: |
        aws ecs stop-service-deployment \ 
          --service-deployment-arn ${{ steps.deploy.outputs.codedeploy-deployment-id }} \
          --stop-type "ROLLBACK"
        exit 1
