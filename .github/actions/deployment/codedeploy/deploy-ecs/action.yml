name: Deploy Container via CodeDeploy

inputs:
  cluster-name:
    description: "The name of the ECS Cluster"
    required: true
  ecs-service-name:
    description: "The name of the ECS Service"
    required: true
  ecs-container-name:
    description: "The name of the ECS Container"
    required: true
  image-uri:
    description: "The image to deploy"
    required: true
  ecs-container-port:
    description: "The container port to use"
    required: true
  aws-account-id:
    description: "The AWS Account ID"
    required: true

runs:
  using: composite
  steps:
    - name: Create Amazon ECS task definition
      id: render
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        container-name: ${{ inputs.ecs-container-name }}
        task-definition-family: ${{ inputs.ecs-service-name }}
        image: ${{ inputs.image-uri }}

    - name: Deploy new task definition
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.render.outputs.task-definition }}
        service: ${{ inputs.ecs-service-name }}
        cluster: ${{ inputs.cluster-name }}

    - name: Output ECS URL with redirect
      id: output
      shell: bash
      run: |
        REDIRECT_URL="https://vygruppen.awsapps.com/start/#/console?account_id=${{ inputs.aws-account-id}}&destination="
        ECS_URL="https://console.aws.amazon.com/ecs/v2/clusters/${{inputs.cluster-name}}/services/${{inputs.ecs-service-name}}/deployments?region=eu-west-1"
        ENCODED_ECS_URL=$(jq -rn --arg v "$ECS_URL" '$v|@uri')
        echo "--- URLs to interact with AWS ---"
        echo "ECS console (to debug ECS errors): ${REDIRECT_URL}${ENCODED_ECS_URL}"

    - name: Monitor ECS Deployment Status
      shell: bash
      id: monitor
      # language=bash
      run: |
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        CYAN='\033[0;36m'
        NC='\033[0m' # No Color

        CURRENT_TIME=$(date +%s)
        START_TIME=$((CURRENT_TIME - 1800)) # 30 minutes ago
        DEADLOCK_COUNTER=0;
        POLLING_INTERVAL=15 # seconds
        MAX_TRIES=3 # Maximum number of tries before giving up finding a deployment
        
        while true; do
          # Initial wait time since deployment might not be immediately available
          sleep 1

          DEPLOYMENTS=$(aws ecs list-service-deployments \
            --cluster "${{ inputs.cluster-name }}" \
            --service "${{ inputs.ecs-service-name }}" \
            --created-at "{ \"after\": ${START_TIME} }" \
            --max-results 10)
        
          DEPLOYMENT_ARN=$(echo "$DEPLOYMENTS" | jq -r '.serviceDeploymentArns[0] // ""')
          echo "DEPLOYMENT_ARN=$DEPLOYMENT_ARN" >> $GITHUB_OUTPUT
      
          if [ -z "$DEPLOYMENT_ARN" ]; then
            echo -e "${YELLOW}No recent deployments found. Waiting...${NC}"
            if [ "$DEADLOCK_COUNTER" -ge "$MAX_TRIES" ]; then
              echo -e "${RED}❌ No deployments found after $MAX_TRIES attempts. Exiting...${NC}"
              exit 1
            fi
            sleep $POLLING_INTERVAL
            continue
          fi
          
          DEPLOYMENT_INFO=$(aws ecs describe-service-deployments \
            --service-deployment-arns "$DEPLOYMENT_ARN")
          DEPLOYMENT=$(echo "$DEPLOYMENT_INFO" | jq -r '.serviceDeployments[0]')
        
          read -r STATUS LIFECYCLE_STAGE STATUS_REASON CREATED_AT <<< \
            $(jq -r '[.status, .lifecycleStage, .statusReason, .createdAt] | join(" ")' <<< "$DEPLOYMENT")
          TARGET_REVISION=$(jq -r '.targetServiceRevision' <<< "$DEPLOYMENT")
          
          read -r REQUESTED_COUNT RUNNING_COUNT PENDING_COUNT <<< \
            $(jq -r '[.requestedTaskCount // 0, .runningCount // 0, .pendingTaskCount // 0] | join(" ")' <<< "$TARGET_REVISION")
          
          CREATED_TIME=$(date -d "@$CREATED_AT" "+%Y-%m-%d %H:%M:%S UTC")
        
          echo -e "Deploy in progress. Refreshing in ${POLL_INTERVAL} seconds. (Try $((++DEADLOCK_COUNTER)))${NC}"
          echo -e "Deployment created at: ${CREATED_TIME}"
          echo -e "${BLUE}Requested Count: $REQUESTED_COUNT, ${YELLOW}Pending Count: $PENDING_COUNT, ${GREEN}Running Count: $RUNNING_COUNT${NC}"
          echo -e "Deployment status: $STATUS, Lifecycle Stage: $LIFECYCLE_STAGE"
          
          if [ -n "$STATUS_REASON" ] && [ "$STATUS_REASON" != "null" ]; then
            echo -e "Status reason: $STATUS_REASON"
          fi
        
          ROLLBACK=$(jq -r '.rollback // {}' <<< "$DEPLOYMENT")
          ROLLBACK_REASON=$(jq -r '.reason // ""' <<< "$ROLLBACK")
          if [ -n "$ROLLBACK_REASON" ] && [ "$ROLLBACK_REASON" != "null" ]; then
            ROLLBACK_STARTED=$(jq -r '.startedAt // 0' <<< "$ROLLBACK")
            ROLLBACK_TIME=$(date -d "@$ROLLBACK_STARTED" "+%Y-%m-%d %H:%M:%S UTC")
            echo -e "${RED}Rollback initiated at ${ROLLBACK_TIME}: $ROLLBACK_REASON${NC}"
          fi
        
          if [[ "$STATUS" == "COMPLETED" ]]; then
            echo -e "${GREEN}✅ ECS Deployment completed successfully!${NC}"
            break
          elif [[ "$STATUS" == "FAILED" ]]; then
            echo -e "${RED}❌ ECS Deployment failed!${NC}"
            echo -e "Reason: $STATUS_REASON"
            exit 1
          elif [[ "$STATUS" == "STOPPED" ]]; then
            echo -e "${RED}⚠️ ECS Deployment was stopped!${NC}"
            echo -e "Reason: $STATUS_REASON"
            exit 1
          fi
        
          sleep $POLLING_INTERVAL
        done
        
    - name: Cancel CodeDeploy Deployment and Fail
      if: cancelled()
      shell: bash
      run: |
        aws ecs stop-service-deployment \ 
          --service-deployment-arn ${{ steps.monitor.outputs.DEPLOYMENT_ARN }} \
          --stop-type "ROLLBACK"
        exit 1
