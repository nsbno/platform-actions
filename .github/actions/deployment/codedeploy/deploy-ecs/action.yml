name: Deploy Container via CodeDeploy

inputs:
  cluster-name:
    description: "The name of the ECS Cluster"
    required: true
  ecs-service-name:
    description: "The name of the ECS Service"
    required: true
  ecs-container-name:
    description: "The name of the ECS Container"
    required: true
  image-uri:
    description: "The image to deploy"
    required: true
  ecs-container-port:
    description: "The container port to use"
    required: true
  aws-account-id:
    description: "The AWS Account ID"
    required: true

runs:
  using: composite
  steps:
    - name: Create Amazon ECS task definition
      id: render
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        container-name: ${{ inputs.ecs-container-name }}
        task-definition-family: ${{ inputs.ecs-service-name }}
        image: ${{ inputs.image-uri }}

    - name: Deploy new task definition
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.render.outputs.task-definition }}
        service: ${{ inputs.ecs-service-name }}
        cluster: ${{ inputs.cluster-name }}

    - name: Output ECS URL with redirect
      id: output
      shell: bash
      run: |
        REDIRECT_URL="https://vygruppen.awsapps.com/start/#/console?account_id=${{ inputs.aws-account-id}}&destination="
        ECS_URL="https://console.aws.amazon.com/ecs/v2/clusters/${{inputs.cluster-name}}/services/${{inputs.ecs-service-name}}/deployments?region=eu-west-1"
        ENCODED_ECS_URL=$(jq -rn --arg v "$ECS_URL" '$v|@uri')
        echo "--- URLs to interact with AWS ---"
        echo "ECS console (to debug ECS errors): ${REDIRECT_URL}${ENCODED_ECS_URL}"

    - name: Monitor ECS Deployment Status
      shell: bash
      id: monitor
      # language=bash
      run: |
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        BLUE='\033[0;34m'
        CYAN='\033[0;36m'
        NC='\033[0m' # No Color

        CURRENT_TIME=$(date +%s)
        START_TIME=$((CURRENT_TIME - 60)) # 1 minute ago
        # ISO8601 date
        LAST_EVENT_DATE=$(date -u -d "@$CURRENT_TIME" +"%Y-%m-%dT%H:%M:%SZ")
        DEADLOCK_COUNTER=0;
        POLLING_INTERVAL=15 # seconds
        MAX_TRIES=3 # Maximum number of tries before giving up finding a deployment
        FIND_DEPLOYMENT_COUNTER=0
        DEPLOYMENT_ARN=""
        
        while true; do
          if [ -z "$DEPLOYMENT_ARN" ]; then
            sleep 5
            DEPLOYMENTS=$(aws ecs list-service-deployments \
              --cluster "${{ inputs.cluster-name }}" \
              --service "${{ inputs.ecs-service-name }}" \
              --created-at "{ \"after\": ${START_TIME} }" \
              --max-results 5 \
              --status "IN_PROGRESS" "PENDING" 
            )
          
            DEPLOYMENT_ARN=$(echo "$DEPLOYMENTS" | jq -r '.serviceDeployments[0].serviceDeploymentArn // ""')
            echo "DEPLOYMENT_ARN=$DEPLOYMENT_ARN" >> $GITHUB_OUTPUT
        
            if [ -z "$DEPLOYMENT_ARN" ]; then
              echo -e "${YELLOW}No recent deployments found. Waiting...${NC}"
              FIND_DEPLOYMENT_COUNTER=$((FIND_DEPLOYMENT_COUNTER + 1))
              if [ "$FIND_DEPLOYMENT_COUNTER" -ge "$MAX_TRIES" ]; then
                echo -e "${RED}‚ùå No deployments found after $MAX_TRIES attempts. Exiting...${NC}"
                exit 1
              fi
              sleep $POLLING_INTERVAL
              continue
            fi
          fi
          
          DEPLOYMENT_INFO=$(aws ecs describe-service-deployments \
            --service-deployment-arns "$DEPLOYMENT_ARN")
          DEPLOYMENT=$(echo "$DEPLOYMENT_INFO" | jq -r '.serviceDeployments[0]')
        
          STATUS=$(jq -r '.status' <<< "$DEPLOYMENT")
          LIFECYCLE_STAGE=$(jq -r '.lifecycleStage' <<< "$DEPLOYMENT")
          STATUS_REASON=$(jq -r '.statusReason // ""' <<< "$DEPLOYMENT")
          CREATED_AT=$(jq -r '.createdAt' <<< "$DEPLOYMENT")
          TARGET_REVISION=$(jq -r '.targetServiceRevision' <<< "$DEPLOYMENT")
          
          read -r REQUESTED_COUNT RUNNING_COUNT PENDING_COUNT <<< \
            $(jq -r '[.requestedTaskCount // 0, .runningTaskCount // 0, .pendingTaskCount // 0] | join(" ")' <<< "$TARGET_REVISION")
          
          echo -e "Deploy in progress. Refreshing in $POLLING_INTERVAL seconds. (Try $((++DEADLOCK_COUNTER)))${NC}"
          echo -e "${YELLOW}Pending Count: $PENDING_COUNT, ${GREEN}Running Count: $RUNNING_COUNT${NC} (${BLUE}Requested Count: $REQUESTED_COUNT)"
          
          if [ -n "$LIFECYCLE_STAGE" ] && [ "$LIFECYCLE_STAGE" != "null" ]; then
            echo -e "Lifecycle Stage: $LIFECYCLE_STAGE"
          fi  
        
          if [ -n "$STATUS_REASON" ] && [ "$STATUS_REASON" != "null" ]; then
            echo -e "Status reason: $STATUS_REASON"
          fi
        
          ROLLBACK=$(jq -r '.rollback // {}' <<< "$DEPLOYMENT")
          ROLLBACK_REASON=$(jq -r '.reason // ""' <<< "$ROLLBACK")
          if [ -n "$ROLLBACK_REASON" ] && [ "$ROLLBACK_REASON" != "null" ]; then
            ROLLBACK_STARTED=$(jq -r '.startedAt // 0' <<< "$ROLLBACK")
            ROLLBACK_TIME=$(date -u -d "$ROLLBACK_STARTED" "+%Y-%m-%d %H:%M:%S")
            echo -e "${RED}Rollback initiated at ${ROLLBACK_TIME}: $ROLLBACK_REASON${NC}"
          fi
        
          if [[ "$STATUS" == "SUCCESSFUL" || "$STATUS" == "ROLLBACK_SUCCESSFUL" ]]; then
            echo -e "${GREEN}‚úÖ ECS Deployment completed successfully!${NC}"
            break
          elif [[ "$STATUS" == "STOPPED" || "$STATUS" == "ROLLBACK_FAILED" ]]; then
            echo -e "${RED}‚ùå ECS Deployment failed!${NC}"
            echo -e "Reason: $STATUS_REASON"
            exit 1
          else
            # For all other statuses (IN_PROGRESS, PENDING, etc.), continue monitoring
            echo -e "${BLUE}üîÑ ECS Deployment status: $STATUS${NC}"
          fi

          EVENTS_RESPONSE=$(aws ecs describe-services --cluster "${{ inputs.cluster-name }}" \
            --services "${{ inputs.ecs-service-name }}" \
            --query "services[*].events[?createdAt > \`$LAST_EVENT_DATE\`]" \
            --output json)
          
          # Update LAST_EVENT_DATE to the timestamp of the most recent event (if any)
          TEMP_LAST_EVENT_DATE=$(echo "$EVENTS_RESPONSE" | jq -r '.[][0].createdAt // empty')
          
          if [ -n "$TEMP_LAST_EVENT_DATE" ]; then
            LAST_EVENT_DATE="$TEMP_LAST_EVENT_DATE"
          fi
          
          EVENT_COUNT=$(echo "$EVENTS_RESPONSE" | jq -r '.[][] | length')
          if [ -n "$EVENT_COUNT" ] && [ "$EVENT_COUNT" -gt 0 ]; then
            echo -e "${CYAN}Recent Service Events:${NC}"
            echo "$EVENTS_RESPONSE" | jq -r '.[][].message'
            printf "\n"
          fi
          
          # Echo new line
          echo
          echo

          sleep $POLLING_INTERVAL
        done

    - name: Cancel CodeDeploy Deployment and Fail
      if: cancelled()
      shell: bash
      run: |
        aws ecs stop-service-deployment \ 
          --service-deployment-arn ${{ steps.monitor.outputs.DEPLOYMENT_ARN }} \
          --stop-type "ROLLBACK"
        exit 1
