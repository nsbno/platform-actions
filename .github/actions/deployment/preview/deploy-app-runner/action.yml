name: Deploy App Runner Preview Service
description: Deploy an App Runner service for preview environments

inputs:
    service-name:
      description: "The name of the App Runner service to deploy"
      required: true
    ecr-image-base:
      description: "The base ECR image URI to use for the service"
      required: true
    git-sha:
      description: "The Git SHA to use for versioning the service"
      required: true
    service-port:
      description: "The port the service is running on, default is 3000"
      required: true
    aws-account-id:
      description: "The AWS account ID the preview environment will use"
      required: true
    gh-environment-variables:
      description: "Environment variables to set for the App Runner service"
      required: true
    git-event-number:
      description: "The GitHub event number (PR number) to use in the service name"
      required: true
    aws-region:
      description: "The AWS region to deploy the service in"
      required: false
      default: 'eu-west-1'

outputs:
  app-runner-url:
    description: "The URL of the deployed App Runner service"
    value: ${{ steps.wait-for-service.outputs.service_url }}

runs:
  using: composite
  steps:
    - name: Set App Runner service variable
      shell: bash
      id: set-service-variables
      run: |
        echo "service_name=pr-${{ inputs.git-event-number }}-${{ inputs.service-name }}" >> $GITHUB_OUTPUT
        echo "image_uri=${{ inputs.ecr-image-base }}:${{ inputs.git-sha }}" >> $GITHUB_OUTPUT
        echo "access_role_arn='arn:aws:iam::${{ inputs.aws-account-id }}:role/${{inputs.service-name}}-app-runner-service-role'" >> $GITHUB_OUTPUT
        echo "instance_role_arn='arn:aws:iam::${{ inputs.aws-account-id }}:role/${{inputs.service-name}}-app-runner-instance-role'">> $GITHUB_OUTPUT

    - name: Check if App Runner service exists
      id: check-service
      shell: bash
      run: |
        # Define the service name
        SERVICE_NAME="${{ steps.set-service-variables.outputs.service_name }}"

        # Check if service already exists
        SERVICE_ARN=$(aws apprunner list-services --region ${{ inputs.aws-region }} \
          --query "ServiceSummaryList[?ServiceName=='${SERVICE_NAME}'].ServiceArn" --output text)

        if [ -n "$SERVICE_ARN" ]; then
          echo "Service $SERVICE_NAME already exists with ARN: $SERVICE_ARN"
          echo "service_exists=true" >> $GITHUB_OUTPUT
          echo "service_arn=$SERVICE_ARN" >> $GITHUB_OUTPUT
        else
          echo "Service $SERVICE_NAME does not exist"
          echo "service_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Environment Variables Configuration
      id: prepare-env-vars
      shell: bash
      run: |
        ENV_VARS_JSON="{}"
        
        # Path is expected to include `env_vars` or `secrets` after `service_name`
        PARAMS=$(aws ssm get-parameters-by-path --path "/__${{ inputs.service_name }}__/" --recursive --query "Parameters")
        
        if [ -n "$PARAMS" ] && [ "$PARAMS" != "[]" ]; then
          # Process each parameter
          ENV_VARS_JSON="{"
          FIRST=true
        
          for ROW in $(echo "$PARAMS" | jq -c '.[]'); do
            # Extract last part of the path
            FULL_PATH=$(echo "$ROW" | jq -r '.Name')
            NAME=$(basename "$FULL_PATH")
        
            VALUE=$(echo "$ROW" | jq -r '.Value')
        
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              ENV_VARS_JSON="$ENV_VARS_JSON,"
            fi
        
            # Properly escape the value for JSON
            ESCAPED_VALUE=$(echo "$VALUE" | jq -R .)
            ENV_VARS_JSON="$ENV_VARS_JSON\"$NAME\":$ESCAPED_VALUE"
          done
        
          ENV_VARS_JSON="$ENV_VARS_JSON}"
        fi
        
        echo "env_vars_config=$ENV_VARS_JSON" >> $GITHUB_OUTPUT

    - name: Deploy to App Runner Image
      if: steps.check-service.outputs.service_exists == 'false'
      id: deploy-apprunner
      shell: bash
      env:
        ENV_VARS_CONFIG: ${{ steps.prepare-env-vars.outputs.env_vars_config }}
      run: |
        aws apprunner create-service \
        --service-name ${{ steps.set-service-variables.outputs.service_name }} \
        --instance-configuration '{
          "InstanceRoleArn": "${{ steps.set-service-variables.outputs.instance_role_arn }}"
        }' \
        --source-configuration '{
          "ImageRepository": {
            "ImageIdentifier": "${{ steps.set-service-variables.outputs.image_uri }}",
            "ImageRepositoryType": "ECR",
            "ImageConfiguration": { 
              "Port": "${{ inputs.service-port }}",
              "RuntimeEnvironmentSecrets": '"$ENV_VARS_CONFIG"'
            }
          },
          "AuthenticationConfiguration": {
            "AccessRoleArn": "${{ steps.set-service-variables.outputs.access_role_arn }}"
          }
        }' \
        --region ${{ inputs.aws-region }}

    - name: Update Existing App Runner Service
      if: steps.check-service.outputs.service_exists == 'true'
      id: update-service
      shell: bash
      env:
        ENV_VARS_CONFIG: ${{ steps.prepare-env-vars.outputs.env_vars_config }}
      run: |
        # Update existing service
        aws apprunner update-service \
          --service-arn "${{ steps.check-service.outputs.service_arn }}" \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ steps.set-service-variables.outputs.image_uri }}",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": { 
                "Port": "${{ inputs.service-port }}",
                "RuntimeEnvironmentSecrets": '"$ENV_VARS_CONFIG"'
              }
            },
            "AuthenticationConfiguration": {
              "AccessRoleArn": "${{ steps.set-service-variables.outputs.access_role_arn }}"
            }
          }' \
          --region ${{ inputs.aws-region }}

    - name: Wait for App Runner Service to be Active
      id: wait-for-service
      shell: bash
      run: |
        SERVICE_ARN=$(aws apprunner list-services --region ${{ inputs.aws-region }} \
          --query "ServiceSummaryList[?ServiceName=='${{ steps.set-service-variables.outputs.service_name }}'].ServiceArn" --output text)

        for i in {1..30}; do
          STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --region ${{ inputs.aws-region }} \
            --query "Service.Status" --output text)
          echo "Current status: $STATUS"
          if [[ "$STATUS" == "RUNNING" ]]; then
            echo "Service is running."
            break
          fi
          if [[ "$STATUS" == "CREATE_FAILED" ]]; then
            echo "Service deployment failed."
            break
          fi
          sleep 20
        done

        if [[ "$STATUS" != "RUNNING" ]]; then
          echo "Service did not reach RUNNING status."
          exit 1
        fi

        # Get the service URL and set it as an output
        SERVICE_URL=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --region ${{ inputs.aws-region }} \
          --query "Service.ServiceUrl" --output text)
        echo "service_url=${SERVICE_URL}" >> $GITHUB_OUTPUT