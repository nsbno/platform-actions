name: Update Datadog Environment Variable Tags
inputs:
  function-name:
    description: "The name of the Lambda Function"
    required: true
  aws-region:
    description: "The AWS Region to use for the deployment"
    required: true

runs:
  using: composite

  steps:
    - name: Get current environment variables
      id: env-vars
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        aws lambda get-function-configuration --function-name "${{ inputs.function-name }}" --query 'Environment.Variables' --output json > env-vars.json

    - name: Update Lambda Environment Variables with DD Tags
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        ENV_VARS=$(cat env-vars.json)
        
        if [ "$ENV_VARS" = "null" ] || [ -z "$ENV_VARS" ]; then
          echo "No env vars. Skipping environment variable update."
          exit 0
        fi
        
        # Check if any existing variables begin with "DD_"
        HAS_DD_VARS=$(echo $ENV_VARS | jq 'keys[] | select(startswith("DD_"))' | wc -l)

        if [ "$HAS_DD_VARS" -gt 0 ] || [ -z "$ENV_VARS" ] || [ "$ENV_VARS" = "{}" ]; then
          COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"

          UPDATED_ENV_VARS=$(echo $ENV_VARS | jq '. + {
            DD_VERSION: "'$COMMIT_SHA'",
            DD_GIT_COMMIT_SHA: "'$COMMIT_SHA'",
          }')

          ENV_JSON=$(echo '{"Variables": '$UPDATED_ENV_VARS'}')
          aws lambda update-function-configuration --function-name "${{ inputs.function-name }}" --environment "$ENV_JSON"

          aws lambda wait function-updated-v2 --function-name "${{ inputs.function-name }}"
        else
          echo "Datadog not enabled. Skipping environment variable update."
        fi
