name: deployment.preview.yml
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: "The name of the service to deploy"
      service-port:
        required: false
        type: string
        default: "3000"
        description: "The port the service is running on, default is 3000"
      git-sha:
        required: false
        type: string
        default: ${{ github.event.pull_request.head.sha || github.sha }}

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Deploy Preview
    runs-on: ubuntu-latest
    environment: Test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0' # Fetch all history for all branches and tags (for branches)
          ref: ${{ inputs.git-sha }}

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_DEPLOYMENT_ROLE_NAME }}"

      # Get the deployment information for the service. Need to deploy without preview once first for the bucket to be created.
      - name: Get Application Deployment Information
        id: deployment-info
        uses: nsbno/platform-actions/.github/actions/deployment/get-application-deployment-info@main
        with:
          application-name: ${{ inputs.service-name }}

      # Needs to be available before the frontend server deploys
      - name: Deploy Static S3/Website
        if: steps.deployment-info.outputs.static-files-bucket-name != ''
        uses: nsbno/platform-actions/.github/actions/deployment/static-files/upload-build-to-s3@main
        with:
          s3-bucket-name: ${{ steps.deployment-info.outputs.static-files-bucket-name }}

      - name: Set App Runner service variable
        id: set-service-variables
        run: |
          echo "service_name=PR-${{ github.event.number }}-${{ inputs.service-name }}" >> $GITHUB_OUTPUT
          echo "image_uri=${{ steps.deployment-info.outputs.ecr-image-base }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "access_role_arn='arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{inputs.service-name}}-app-runner-service-role'" >> $GITHUB_OUTPUT

      - name: Check if App Runner service exists
        id: check-service
        shell: bash
        run: |
          # Define the service name
          SERVICE_NAME="${{ steps.set-service-variables.outputs.service_name }}"
          
          # Check if service already exists
          SERVICE_ARN=$(aws apprunner list-services --region ${{ vars.AWS_REGION }} \
            --query "ServiceSummaryList[?ServiceName=='${SERVICE_NAME}'].ServiceArn" --output text)
          
          if [ -n "$SERVICE_ARN" ]; then
            echo "Service $SERVICE_NAME already exists with ARN: $SERVICE_ARN"
            echo "service_exists=true" >> $GITHUB_OUTPUT
            echo "service_arn=$SERVICE_ARN" >> $GITHUB_OUTPUT
          else
            echo "Service $SERVICE_NAME does not exist"
            echo "service_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Environment Variables Configuration
        id: prepare-env-vars
        shell: bash
        env:
          VARS_JSON: ${{ toJSON(vars) }}
        run: |
          # Filter out AWS-related environment variables used for the pipeline
          FILTERED_VARS_JSON=$(echo "$VARS_JSON" | jq 'with_entries(select(.key | startswith("AWS_") | not))')

          echo "env_vars_config=$(echo "$FILTERED_VARS_JSON" | jq -c .)" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner Image
        if: steps.check-service.outputs.service_exists == 'false'
        id: deploy-apprunner
        shell: bash
        env:
          ENV_VARS_CONFIG: ${{ steps.prepare-env-vars.outputs.env_vars_config }}
        run: |
          aws apprunner create-service \
          --service-name PR-${{ github.event.number }}-${{ inputs.service-name }} \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ steps.set-service-variables.outputs.image_uri }}",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": { 
                "Port": "${{ inputs.service-port }}",
                "RuntimeEnvironmentVariables": '"$ENV_VARS_CONFIG"'
              }
            },
            "AuthenticationConfiguration": {
              "AccessRoleArn": "${{ steps.set-service-variables.outputs.access_role_arn }}"
            }
          }' \
          --region ${{ vars.AWS_REGION }}

      - name: Update Existing App Runner Service
        if: steps.check-service.outputs.service_exists == 'true'
        id: update-service
        shell: bash
        env:
          ENV_VARS_CONFIG: ${{ steps.prepare-env-vars.outputs.env_vars_config }}
        run: |
          # Update existing service
          aws apprunner update-service \
            --service-arn "${{ steps.check-service.outputs.service_arn }}" \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.set-service-variables.outputs.image_uri }}",
                "ImageRepositoryType": "ECR",
                "ImageConfiguration": { 
                  "Port": "${{ inputs.service-port }}",
                  "RuntimeEnvironmentVariables": '"$ENV_VARS_CONFIG"'
                }
              },
              "AuthenticationConfiguration": {
                "AccessRoleArn": "${{ steps.set-service-variables.outputs.access_role_arn }}"
              }
            }' \
            --region ${{ vars.AWS_REGION }}

      - name: Wait for App Runner Service to be Active
        shell: bash
        run: |
          SERVICE_ARN=$(aws apprunner list-services --region ${{ vars.AWS_REGION }} \
            --query "ServiceSummaryList[?ServiceName=='${{ steps.set-service-variables.outputs.service_name }}'].ServiceArn" --output text)

          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --region ${{ vars.AWS_REGION }} \
              --query "Service.Status" --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "Service is running."
              break
            fi
            if [[ "$STATUS" == "CREATE_FAILED" ]]; then
              echo "Service deployment failed."
              break
            fi
            sleep 20
          done

          if [[ "$STATUS" != "RUNNING" ]]; then
            echo "Service did not reach RUNNING status."
            exit 1
          fi
