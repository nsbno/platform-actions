name: deployment.preview.yml
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: "The name of the service to deploy"
      image-uri:
        required: true
        type: string
        description: "The image URI to deploy"
      access-role-arn:
        required: true
        type: string
        description: "The ARN of the IAM role to access the image repository"
      domain-name:
        required: false
        type: string
        description: "The custom domain name to associate with the App Runner service"
        default: ""
      hosted-zone-id:
        required: false
        type: string
        description: "The Route 53 hosted zone ID for the domain"
        default: ""

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Deploy Preview
    runs-on: ubuntu-latest
    environment: Test
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_DEPLOYMENT_ROLE_NAME }}"

      - name: Deploy to App Runner Image
        id: deploy-apprunner
        shell: bash
        run: |
          aws apprunner create-service \
          --service-name PR-${{ github.event.number }}-${{ inputs.service-name }} \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ inputs.image-uri }}",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": { "Port": "3000" }
            },
            "AuthenticationConfiguration": {
              "AccessRoleArn": "'${{ inputs.access-role-arn }}'"
            }
          }' \
          --region ${{ vars.AWS_REGION }}

      - name: Wait for App Runner Service to be Active
        shell: bash
        run: |
          SERVICE_ARN=$(aws apprunner list-services --region ${{ vars.AWS_REGION }} \
            --query "ServiceSummaryList[?ServiceName=='PR-${{ github.event.number }}-${{ inputs.service-name }}'].ServiceArn" --output text)

          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --region ${{ vars.AWS_REGION }} \
              --query "Service.Status" --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "Service is running."
              break
            fi
            sleep 20
          done

          if [[ "$STATUS" != "RUNNING" ]]; then
            echo "Service did not reach RUNNING status."
            exit 1
          fi
