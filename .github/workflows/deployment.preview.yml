name: deployment.preview.yml
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: "The name of the service to deploy"
      image-uri:
        required: true
        type: string
        description: "The image URI to deploy"
      access-role-arn:
        required: true
        type: string
        description: "The ARN of the IAM role to access the image repository"
      domain-name:
        required: false
        type: string
        description: "The custom domain name to associate with the App Runner service"
        default: ""
      hosted-zone-id:
        required: false
        type: string
        description: "The Route 53 hosted zone ID for the domain"
        default: ""

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Deploy Preview
    runs-on: ubuntu-latest
    environment: Test
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_DEPLOYMENT_ROLE_NAME }}"

      - name: Set App Runner service name
        id: set-service-name
        run: echo "service_name=PR-${{ github.event.number }}-${{ inputs.service-name }}" >> $GITHUB_OUTPUT

      - name: Check if App Runner service exists
        id: check-service
        shell: bash
        run: |
          # Define the service name
          SERVICE_NAME="${{ steps.set-service-name.outputs.service_name }}"
          
          # Check if service already exists
          SERVICE_ARN=$(aws apprunner list-services --region ${{ vars.AWS_REGION }} \
            --query "ServiceSummaryList[?ServiceName=='${SERVICE_NAME}'].ServiceArn" --output text)
          
          if [ -n "$SERVICE_ARN" ]; then
            echo "Service $SERVICE_NAME already exists with ARN: $SERVICE_ARN"
            echo "service_exists=true" >> $GITHUB_OUTPUT
            echo "service_arn=$SERVICE_ARN" >> $GITHUB_OUTPUT
          else
            echo "Service $SERVICE_NAME does not exist"
            echo "service_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Environment Variables Configuration
        id: prepare-env-vars
        shell: bash
        env:
          VARS_JSON: ${{ toJSON(vars) }}
        run: |
          echo "$VARS_JSON" | jq -r 'keys[] as $k | "\($k)=\(.[$k])"'
          echo "env_vars_config=$VARS_JSON" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner Image
        if: steps.check-service.outputs.service_exists == 'false'
        id: deploy-apprunner
        shell: bash
        env:
          ENV_VARS_CONFIG: ${{ steps.prepare-env-vars.outputs.env_vars_config }}
        run: |
          aws apprunner create-service \
          --service-name PR-${{ github.event.number }}-${{ inputs.service-name }} \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ inputs.image-uri }}",
              "ImageRepositoryType": "ECR",
              "ImageConfiguration": { 
                "Port": "3000",
                "RuntimeEnvironmentVariables": '"$ENV_VARS_CONFIG"'
              }
            },
            "AuthenticationConfiguration": {
              "AccessRoleArn": "'${{ inputs.access-role-arn }}'"
            }
          }' \
          --region ${{ vars.AWS_REGION }}

      - name: Update Existing App Runner Service
        if: steps.check-service.outputs.service_exists == 'true'
        id: update-service
        shell: bash
        env:
          ENV_VARS_CONFIG: ${{ steps.prepare-env-vars.outputs.env_vars_config }}
        run: |
          # Update existing service
          aws apprunner update-service \
            --service-arn "${{ steps.check-service.outputs.service_arn }}" \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "${{ inputs.image-uri }}",
                "ImageRepositoryType": "ECR",
                "ImageConfiguration": { 
                  "Port": "3000",
                  "RuntimeEnvironmentVariables": '"$ENV_VARS_CONFIG"'
                }
              },
              "AuthenticationConfiguration": {
                "AccessRoleArn": "'${{ inputs.access-role-arn }}'"
              }
            }' \
            --region ${{ vars.AWS_REGION }}

      - name: Wait for App Runner Service to be Active
        shell: bash
        run: |
          SERVICE_ARN=$(aws apprunner list-services --region ${{ vars.AWS_REGION }} \
            --query "ServiceSummaryList[?ServiceName=='${{ steps.set-service-name.outputs.service_name }}'].ServiceArn" --output text)

          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --region ${{ vars.AWS_REGION }} \
              --query "Service.Status" --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "Service is running."
              break
            fi
            if [[ "$STATUS" == "CREATE_FAILED" ]]; then
              echo "Service deployment failed."
              break
            fi
            sleep 20
          done

          if [[ "$STATUS" != "RUNNING" ]]; then
            echo "Service did not reach RUNNING status."
            exit 1
          fi
