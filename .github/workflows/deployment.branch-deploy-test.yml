name: deployment.branch-deploy-test.yml
on:
  workflow_call:
    inputs:
      applications:
        description: The name of the application in your Terraform configuration. Comma-separated.
        type: string
        required: false
      working-directory:
        description: "Directory containing the project files"
        required: false
        type: string
        default: "."
      terraform-directory:
        description: Directory where Terraform environment directories are located
        type: string
        required: false
        default: ''


jobs:
  trigger:
    name: Trigger - Branch Deploy Test
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '.deploy')
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.branch-deploy.outputs.continue }}
      deployment_id: ${{ steps.branch-deploy.outputs.deployment_id }}
      environment: ${{ steps.branch-deploy.outputs.environment }}
      ref: ${{ steps.branch-deploy.outputs.ref }}
      sha: ${{ steps.branch-deploy.outputs.sha }}
      comment_id: ${{ steps.branch-deploy.outputs.comment_id }}
      initial_reaction_id: ${{ steps.branch-deploy.outputs.initial_reaction_id }}
      actor_handle: ${{ steps.branch-deploy.outputs.actor_handle }}
      application-names: ${{ steps.parse-app-names.outputs.apps_json }}

    steps:
      - uses: github/branch-deploy@v10.4.2
        id: branch-deploy
        with:
          trigger: '.deploy test'
          environment: 'Test'
          skip_completing: 'true' # we will complete the deployment manually
          skip_reviews: 'Test' # skip reviews for test deployments
      - id: parse-app-names
        run: |
          APPS_JSON=$(echo '${{ inputs.applications }}' | jq -Rc 'split(",") | map(select(length > 0) | ltrimstr(" ") | rtrimstr(" "))')
          echo "apps_json=${APPS_JSON}" >> $GITHUB_OUTPUT

  test-terraform:
    name: Test - Terraform
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-terraform.yml@main
    needs: trigger
    if: |
      always()
      && needs.trigger.outputs.continue == 'true'
      && !cancelled()
    strategy:
      matrix:
        # Matrix gives better visibility in GH UI
        environment: [ Test ]
    with:
      environment: ${{ matrix.environment }}
      working-directory: ${{ inputs.working-directory }}
      terraform-directory: ${{ inputs.terraform-directory }}
      deploy-terraform: true
      sha-to-deploy: ${{ needs.trigger.outputs.sha }}

  test-application:
    name: Test - Application
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-application.yml@ecs-blue-green
    needs:
      - test-terraform
      - trigger
    if: |
      always()
      && needs.trigger.outputs.continue == 'true'
      && inputs.applications
      && !cancelled()
    strategy:
      matrix:
        application-name: ${{ fromJSON(needs.trigger.outputs.application-names) }}
    with:
      application-name: ${{ matrix.application-name }}
      environment: Test
      deploy-application: true
      sha-to-deploy: ${{ needs.trigger.outputs.sha }}

  # From https://github.com/github/branch-deploy/blob/main/docs/examples.md#multiple-jobs
  result:
    needs: [ trigger, test-terraform, test-application ]
    runs-on: ubuntu-latest
    # run even on failures but only if the trigger job set continue to true
    if: ${{ always() && needs.trigger.outputs.continue == 'true' }}
    steps:
      # if a previous step failed, set a variable to use as the deployment status
      - name: set deployment status
        id: deploy-status
        if: ${{ contains(needs.*.result, 'failure') || cancelled() }}
        run: |
          echo "DEPLOY_STATUS=failure" >> $GITHUB_OUTPUT

      # use the GitHub CLI to update the deployment status that was initiated by the branch-deploy action
      - name: Create a deployment status
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
          DEPLOY_STATUS: ${{ steps.deploy-status.outputs.DEPLOY_STATUS }}
        run: |
          if [ -z "${DEPLOY_STATUS}" ]; then
            DEPLOY_STATUS="success"
          fi

          gh api \
            --method POST \
            repos/{owner}/{repo}/deployments/${{ needs.trigger.outputs.deployment_id }}/statuses \
            -f environment='${{ needs.trigger.outputs.environment }}' \
            -f state=${DEPLOY_STATUS}

      # use the GitHub CLI to remove the non-sticky lock that was created by the branch-deploy action
      - name: Remove a non-sticky lock
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method DELETE \
            repos/{owner}/{repo}/git/refs/heads/${{ needs.trigger.outputs.environment }}-branch-deploy-lock

      # remove the default 'eyes' reaction from the comment that triggered the deployment
      # this reaction is added by the branch-deploy action by default
      - name: remove eyes reaction
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method DELETE \
            repos/{owner}/{repo}/issues/comments/${{ needs.trigger.outputs.comment_id }}/reactions/${{ needs.trigger.outputs.initial_reaction_id }}

      # if the deployment was successful, add a 'rocket' reaction to the comment that triggered the deployment
      - name: rocket reaction
        if: ${{ steps.deploy-status.outputs.DEPLOY_STATUS != 'failure' }}
        uses: GrantBirki/comment@1e9986de26cf23e6c4350276234c91705c540fef # pin@v2.0.3
        with:
          comment-id: ${{ needs.trigger.outputs.comment_id }}
          reactions: rocket

      # if the deployment failed, add a '-1' (thumbs down) reaction to the comment that triggered the deployment
      - name: failure reaction
        if: ${{ steps.deploy-status.outputs.DEPLOY_STATUS == 'failure' }}
        uses: GrantBirki/comment@1e9986de26cf23e6c4350276234c91705c540fef # pin@v2.0.3
        with:
          comment-id: ${{ needs.trigger.outputs.comment_id }}
          reactions: '-1'

      # if the deployment was successful, add a 'success' comment
      - name: success comment
        if: ${{ steps.deploy-status.outputs.DEPLOY_STATUS != 'failure' }}
        uses: peter-evans/create-or-update-comment@67dcc547d311b736a8e6c5c236542148a47adc3d # pin@v2.1.1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ### Deployment Results ✅

            **${{ needs.trigger.outputs.actor_handle }}** successfully deployed branch `${{ needs.trigger.outputs.ref }}` to **${{ needs.trigger.outputs.environment }}**

      # if the deployment was not successful, add a 'failure' comment
      - name: failure comment
        if: ${{ steps.deploy-status.outputs.DEPLOY_STATUS == 'failure' }}
        uses: peter-evans/create-or-update-comment@67dcc547d311b736a8e6c5c236542148a47adc3d # pin@v2.1.1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ### Deployment Results ❌

            **${{ needs.trigger.outputs.actor_handle }}** had a failure when deploying `${{ needs.trigger.outputs.ref }}` to **${{ needs.trigger.outputs.environment }}**
