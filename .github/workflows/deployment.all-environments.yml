name: Deploy All Environments

on:
  workflow_call:
    inputs:
      application-names:
        description: The name of the application in your Terraform configuration. Comma-separated.
        type: string
        required: true
      has-application-changes:
        description: All changes in application and infrastructure
        type: boolean
        required: false
        default: true
      terraform-changes:
        type: string
        required: true
      working-directory:
        description: "Directory containing the project files"
        required: false
        type: string
        default: "."
      terraform-directory:
        description: Directory where Terraform environment directories are located
        type: string
        required: false
        default: 'environments'


run-name: Deploy Environments

jobs:
  get-environments:
    name: Find Relevant GH Environments
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.envs.outputs.environments }}
      application-names: ${{ steps.parse-app-names.outputs.apps_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: nsbno/platform-actions/.github/actions/helpers/get-environments@main
        id: envs
      - name: Parse application names
        id: parse-app-names
        run: |
          APPS_JSON=$(echo '${{ inputs.application-names }}' | jq -Rc 'split(",") | map(select(length > 0) | ltrimstr(" ") | rtrimstr(" "))')
          echo "apps_json=${APPS_JSON}" >> $GITHUB_OUTPUT

  # Service always needs to be deployed first, and we only deploy Terraform changes.
  service-terraform:
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-terraform.yml@main
    needs: get-environments
    if: |
      always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
      && contains(needs.get-environments.outputs.environments, 'Service')
    with:
      environment: Service
      deploy-terraform: ${{ contains(fromJSON(inputs.terraform-changes), 'Service') }}
      working-directory: ${{ inputs.working-directory }}
      terraform-directory: ${{ inputs.terraform-directory }}

  test-terraform:
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-terraform.yml@main
    needs: 
      - service-terraform
      - get-environments
    if: |
      always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
      && contains(needs.get-environments.outputs.environments, 'Test')
    with:
      environment: Test
      deploy-terraform: ${{ contains(fromJSON(inputs.terraform-changes), 'Test') }}
      working-directory: ${{ inputs.working-directory }}
      terraform-directory: ${{ inputs.terraform-directory }}

  test-application:
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-application.yml@main
    needs:
      - test-terraform
      - get-environments
    if: |
      always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
      && needs.test-terraform.result != 'failure'
      && contains(needs.get-environments.outputs.environments, 'Test')
    strategy:
      matrix:
        application-name: ${{ fromJSON(needs.get-environments.outputs.application-names) }}
    with:
      application-name: ${{ matrix.application-name }}
      environment: Test
      deploy-application: ${{ inputs.has-application-changes }}

  stage-terraform:
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-terraform.yml@main
    needs:
      - service-terraform
      - get-environments
    if: |
      always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
      && contains(needs.get-environments.outputs.environments, 'Stage')
    with:
      environment: Stage
      deploy-terraform: ${{ contains(fromJSON(inputs.terraform-changes), 'Stage') }}
      working-directory: ${{ inputs.working-directory }}
      terraform-directory: ${{ inputs.terraform-directory }}

  stage-application:
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-application.yml@main
    needs:
      - stage-terraform
      - get-environments
    if: |
      always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
      && needs.stage-terraform.result != 'failure'
      && contains(needs.get-environments.outputs.environments, 'Stage')
    strategy:
      matrix:
        application-name: ${{ fromJSON(needs.get-environments.outputs.application-names) }}
    with:
      application-name: ${{ matrix.application-name }}
      environment: Stage
      deploy-application: ${{ inputs.has-application-changes }}

  production-terraform:
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-terraform.yml@main
    needs:
      - stage-application
      - stage-terraform
      - test-application
      - test-terraform
    if: |
      always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
      && contains(needs.get-environments.outputs.environments, 'Production')
    with:
      environment: Production
      deploy-terraform: ${{ contains(fromJSON(inputs.terraform-changes), 'Production') }}
      working-directory: ${{ inputs.working-directory }}
      terraform-directory: ${{ inputs.terraform-directory }}

  production-application:
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-application.yml@main
    needs:
      - production-terraform
      - get-environments
    if: |
      always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
      && contains(needs.get-environments.outputs.environments, 'Production')
    strategy:
      matrix:
        application-name: ${{ fromJSON(needs.get-environments.outputs.application-names) }}
    with:
      application-name: ${{ matrix.application-name }}
      environment: Production
      deploy-application: ${{ inputs.has-application-changes }}
