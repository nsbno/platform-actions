name: deployment.branch-deploy-test.yml
on:
  workflow_call:
    inputs:
      applications:
        description: The name of the application in your Terraform configuration. Comma-separated.
        type: string
        required: false
      working-directory:
        description: "Directory containing the project files"
        required: false
        type: string
        default: "."
      terraform-directory:
        description: Directory where Terraform environment directories are located
        type: string
        required: false
        default: ''

permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read
  id-token: write

jobs:
  trigger:
    name: Trigger - Branch Deploy Test
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '.deploy')
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.branch-deploy.outputs.continue }}
      deployment_id: ${{ steps.branch-deploy.outputs.deployment_id }}
      environment: ${{ steps.branch-deploy.outputs.environment }}
      ref: ${{ steps.branch-deploy.outputs.ref }}
      sha: ${{ steps.branch-deploy.outputs.sha }}
      comment_id: ${{ steps.branch-deploy.outputs.comment_id }}
      initial_reaction_id: ${{ steps.branch-deploy.outputs.initial_reaction_id }}
      actor_handle: ${{ steps.branch-deploy.outputs.actor_handle }}
      application-names: ${{ steps.parse-app-names.outputs.apps_json }}

    steps:
      - uses: github/branch-deploy@c9fcc362bdcea69eecac6578dde245cd5e3a55bf  # 10.4.3
        id: branch-deploy
        with:
          trigger: '.deploy test'
          environment: 'Test'
          skip_completing: 'true' # we will complete the deployment manually
          skip_reviews: 'Test' # skip reviews for test deployments
          draft_permitted_targets: Test # allow draft PRs to deploy to Test
          stable_branch: ${{ github.event.repository.default_branch || 'main' }} # branch-deploy uses 'main' as default

      - id: parse-app-names
        run: |
          APPS_JSON=$(echo '${{ inputs.applications }}' | jq -Rc 'split(",") | map(select(length > 0) | ltrimstr(" ") | rtrimstr(" "))')
          echo "apps_json=${APPS_JSON}" >> $GITHUB_OUTPUT

  test-terraform:
    name: Test - Terraform
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-terraform.yml@main
    needs: trigger
    if: |
      always()
      && needs.trigger.outputs.continue == 'true'
      && !cancelled()
    strategy:
      matrix:
        # Matrix gives better visibility in GH UI
        environment: [ Test ]
    with:
      environment: ${{ matrix.environment }}
      working-directory: ${{ inputs.working-directory }}
      terraform-directory: ${{ inputs.terraform-directory }}
      deploy-terraform: true
      sha-to-deploy: ${{ needs.trigger.outputs.sha }}

  test-application:
    name: Test - Application
    uses: nsbno/platform-actions/.github/workflows/deployment.single-environment-application.yml@main
    needs:
      - test-terraform
      - trigger
    if: |
      always()
      && needs.trigger.outputs.continue == 'true'
      && !contains(needs.test-terraform.result, 'failure')
      && inputs.applications
      && !cancelled()
    strategy:
      matrix:
        application-name: ${{ fromJSON(needs.trigger.outputs.application-names) }}
    with:
      application-name: ${{ matrix.application-name }}
      environment: Test
      deploy-application: true
      sha-to-deploy: ${{ needs.trigger.outputs.sha }}
      skip-s3-deployment: true # Skip S3 deployment for branch deployments, assume it already is deployed before command

  comment-handler:
    needs: [ trigger, test-application, test-terraform ]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.trigger.outputs.continue == 'true' }}
    steps:
      - uses: nsbno/platform-actions/.github/actions/helpers/branch-comment-handler@main
        with:
          is-preview: false
          environment: Test
          github-repository: ${{ github.repository }}
          github-token: ${{ github.token }}
          issue-number: ${{ github.event.issue.number }}
          ref: ${{ needs.trigger.outputs.ref }}
          initial-reaction-id: ${{ needs.trigger.outputs.initial_reaction_id }}
          deployment-id: ${{ needs.trigger.outputs.deployment_id }}
          comment-id: ${{ needs.trigger.outputs.comment_id }}
          actor-handle: ${{ needs.trigger.outputs.actor_handle }}
          job-status: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') && 'failure' || 'success' }}
