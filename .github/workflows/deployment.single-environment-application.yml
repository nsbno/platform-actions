name: Deploy to single environment

on:
  workflow_call:
    inputs:
      application-name:
        description: Name of the application to deploy
        type: string
        required: true
      environment:
        description: Environment to deploy
        type: string
        required: true
      deploy-application:
        description: Should application be deployed
        type: boolean
        required: true


run-name: Deploy to ${{ inputs.environment }}

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ inputs.environment }}-deploy-${{ inputs.application-name }}
  cancel-in-progress: true

jobs:
  deploy-applications:
    name: ${{ inputs.application-name }} (${{ inputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: |
      inputs.deploy-application
      && always()
      && !cancelled()
      && !contains(needs.*.result, 'failure')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_DEPLOYMENT_ROLE_NAME }}"

      - name: Get Application Deployment Information
        id: deployment-info
        uses: nsbno/platform-actions/.github/actions/deployment/get-application-deployment-info@main
        with:
          application-name: ${{ inputs.application-name }}

      - name: Deploy ECS
        if: steps.deployment-info.outputs.compute-target == 'ecs'
        uses: nsbno/platform-actions/.github/actions/deployment/codedeploy/deploy-ecs@main
        with:
          application-name: ${{ steps.deployment-info.outputs.codedeploy-application-name }}
          deployment-group-name: ${{ steps.deployment-info.outputs.codedeploy-deployment-group }}
          cluster-name: ${{ steps.deployment-info.outputs.ecs-cluster-name }}
          image-uri: "${{ steps.deployment-info.outputs.ecr-image-base }}:${{ github.sha }}"
          ecs-service-name: ${{ steps.deployment-info.outputs.ecs-service-name }}
          ecs-container-port: ${{ steps.deployment-info.outputs.ecs-container-port }}
          aws-account-id: ${{ vars.AWS_ACCOUNT_ID }}

      - name: Deploy Lambda
        if: steps.deployment-info.outputs.compute-target == 'lambda'
        uses: nsbno/platform-actions/.github/actions/deployment/codedeploy/deploy-lambda-image@main
        with:
          application-name: ${{ steps.deployment-info.outputs.codedeploy-application-name }}
          deployment-group-name: ${{ steps.deployment-info.outputs.codedeploy-deployment-group }}
          function-name: ${{ steps.deployment-info.outputs.lambda-function-name }}
          image-uri: ${{ steps.deployment-info.outputs.lambda-image-uri }}
