on:
  workflow_call:
    inputs:
      force-deploy:
        description:  Makes sure that terraform deploy always happens
        type: boolean
        default: false
        required: false
      working-directory:
        description: "Directory containing the project files"
        required: false
        type: string
        default: "."
      terraform-directory:
        description: Directory where Terraform environment directories are located
        type: string
        required: false
        default: 'environments'

    outputs:
      # A list with names of which environments as changes
      has-changes:
        description: 'List of environments with changes'
        value: ${{ jobs.create-terraform-changes-list.outputs.changes }}

name: Find Terraform Changes

# Needed to avoid conflicts with terraform state
concurrency:
  group: ${{ inputs.environment }}-terraform

jobs:
  get-environments:
    if: ${{ !inputs.force-deploy }}
    name: Find Relevant GH Environments
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.envs.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: nsbno/platform-actions/.github/actions/helpers/get-environments@main
        id: envs

  has-terraform-changed:
    name: Detect Changes
    needs: get-environments
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.get-environments.outputs.environments) }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform Plan
        uses: nsbno/platform-actions/.github/actions/helpers/has-terraform-changed@main
        id: changed-files
        with:
          environment: ${{ matrix.environment }}
          aws-region: ${{ vars.AWS_REGION }}
          aws-account-id: ${{ vars.AWS_ACCOUNT_ID }}
          deployment-role: ${{ vars.AWS_DEPLOYMENT_ROLE_NAME }}
          working-directory: ${{ inputs.working-directory }}
          terraform-directory: ${{ inputs.terraform-directory }}

      - name: Notify about changes
        shell: bash
        run: |
          if ${{ steps.changed-files.outputs.any-changed }}; then
            echo "::notice title=Changes to Terraform::${{ matrix.environment}} has changes and will be deployed ðŸš€"
            echo "::group::Terraform Output for ${{ matrix.environment }}"
            printf "%s" "${{ steps.changed-files.outputs.stdout }}"
            echo "::endgroup::"
          else
            echo "::notice title=Changes to Terraform::${{ matrix.environment}} has no changes, and will not be deployed ðŸ’¤"
          fi

      - name: Set output
        shell: bash
        run: |
          mkdir -p ./matrix-outputs
          echo "${{ steps.changed-files.outputs.any-changed }}" > ./matrix-outputs/${{ matrix.environment }}.txt

      - name: Upload matrix outputs
        uses: actions/upload-artifact@v4
        with:
          name: matrix-outputs-${{ matrix.environment }}
          path: ./matrix-outputs
          retention-days: 1
          overwrite: true

  create-terraform-changes-list:
    name: Aggregate Changes
    needs:
      - has-terraform-changed
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.aggregate.outputs.CHANGES }}
    steps:
      - name: Download matrix outputs
        uses: actions/download-artifact@v4
        with:
          pattern: matrix-outputs-*
          merge-multiple: true
          path: ./matrix-outputs

      - name: Aggregate environment changes
        id: aggregate
        run: |
          # One-liner to create JSON array of environments with changes
          CHANGES=$(grep -l "true" ./matrix-outputs/*.txt | sed -E 's/.*\/(.*)\.txt/\1/' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          
          echo "Following environments have changes: ${CHANGES}"
          echo "CHANGES=${CHANGES}" >> $GITHUB_OUTPUT
