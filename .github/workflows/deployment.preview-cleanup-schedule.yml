name: Preview Deployment Cleanup All Services
on:
  workflow_call:
    inputs:
      days-to-keep:
        required: false
        type: number
        description: "Number of days to keep preview deployments. Default is 5 days."
        default: 5

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  cleanup:
    name: Delete App Runner Service and Logs
    runs-on: ubuntu-latest
    environment: Preview
    steps:
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ vars.AWS_DEPLOYMENT_ROLE_NAME }}"

      - name: List all preview services
        id: list-previews
        shell: bash
        run: |
          # Get all App Runner services with "pr-" prefix
          PREVIEW_SERVICES=$(aws apprunner list-services --region ${{ vars.AWS_REGION }} \
            --query "ServiceSummaryList[?starts_with(ServiceName, 'pr-')].{Name:ServiceName,Arn:ServiceArn}" --output json)
          # Ensure proper JSON escaping for GitHub Actions output
          echo "preview_services=$(echo "$PREVIEW_SERVICES" | jq -c .)" >> $GITHUB_OUTPUT
          echo "Found $(echo "$PREVIEW_SERVICES" | jq 'length') preview services"

      - name: Identify inactive services (older than ${{ inputs.days-to-keep }} days)
        id: identify-inactive
        shell: bash
        env:
          PREVIEW_SERVICES: ${{ steps.list-previews.outputs.preview_services }}
        run: |
          # Get current timestamp in seconds
          CURRENT_TIME=$(date +%s)
          # ${{ inputs.days-to-keep }} days in seconds
          INACTIVE_THRESHOLD=$((${{ inputs.days-to-keep }} * 24 * 60 * 60))

          INACTIVE_PREVIEWS="[]"
          echo "$PREVIEW_SERVICES" | jq -c '.[]' | while read -r SERVICE; do
            SERVICE_NAME=$(echo "$SERVICE" | jq -r '.Name')
            SERVICE_ARN=$(echo "$SERVICE" | jq -r '.Arn')

            echo "Checking service: $SERVICE_NAME"

            # Get service details including last deployment time
            SERVICE_DETAILS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --region ${{ vars.AWS_REGION }})

            # Get the last deployment time
            LAST_DEPLOYMENT=$(echo "$SERVICE_DETAILS" | jq -r '.Service.CreatedAt')

            # Convert to timestamp in seconds
            LAST_DEPLOYMENT_TIME=$(date -d "$LAST_DEPLOYMENT" +%s)
            TIME_DIFF=$((CURRENT_TIME - LAST_DEPLOYMENT_TIME))

            echo "Service $SERVICE_NAME was last active $TIME_DIFF seconds ago"

            # Check if inactive for more than threshold
            if [ $TIME_DIFF -gt $INACTIVE_THRESHOLD ]; then
              echo "Service $SERVICE_NAME is inactive for more than ${{ inputs.days-to-keep }} days. Adding to cleanup list."

              # Extract PR number from the service name (format: pr-{PR_NUMBER}-{SERVICE_NAME})
              PR_NUMBER=$(echo "$SERVICE_NAME" | sed -n 's/pr-\([0-9]*\)-.*/\1/p')

              echo "Extracted PR number: $PR_NUMBER"
              INACTIVE_PREVIEWS=$(echo "$INACTIVE_PREVIEWS" | jq --arg name "$SERVICE_NAME" --arg arn "$SERVICE_ARN" --arg pr "$PR_NUMBER" '. += [{"name": $name, "arn": $arn, "pr": $pr}]')
            else
              echo "Service $SERVICE_NAME is still active (less than ${{ inputs.days-to-keep }} days old)"
            fi
          done

          # Ensure proper JSON escaping for GitHub Actions output
          echo "inactive_previews=$(echo "$INACTIVE_PREVIEWS" | jq -c .)" >> $GITHUB_OUTPUT
          echo "Found $(echo "$INACTIVE_PREVIEWS" | jq 'length') inactive preview services"

          # Set a flag to indicate if we have any inactive services
          if [ "$(echo "$INACTIVE_PREVIEWS" | jq 'length')" -gt 0 ]; then
            echo "has_inactive=true" >> $GITHUB_OUTPUT
          else
            echo "has_inactive=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete App Runner Service
        if: steps.identify-inactive.outputs.has_inactive == 'true'
        id: delete-service
        shell: bash
        env:
          INACTIVE_PREVIEWS: ${{ steps.identify-inactive.outputs.inactive_previews }}
        run: |
          echo "$INACTIVE_PREVIEWS" | jq -c '.[]' | while read -r SERVICE; do
            SERVICE_NAME=$(echo "$SERVICE" | jq -r '.name')
            SERVICE_ARN=$(echo "$SERVICE" | jq -r '.arn')

            echo "Deleting App Runner service: $SERVICE_NAME"
            aws apprunner delete-service --service-arn "$SERVICE_ARN" --region ${{ vars.AWS_REGION }}

            if [ $? -eq 0 ]; then
              echo "Successfully deleted App Runner service: $SERVICE_NAME"
            else
              echo "Failed to delete App Runner service: $SERVICE_NAME"
            fi
          done

      - name: Delete CloudWatch Logs
        if: steps.identify-inactive.outputs.has_inactive == 'true'
        shell: bash
        env:
          INACTIVE_PREVIEWS: ${{ steps.identify-inactive.outputs.inactive_previews }}
        run: |
          # Process each inactive service
          echo "$INACTIVE_PREVIEWS" | jq -c '.[]' | while read -r SERVICE; do
            SERVICE_NAME=$(echo "$SERVICE" | jq -r '.name')

            echo "Deleting CloudWatch logs for service: $SERVICE_NAME"
            PREFIX="/aws/apprunner/$SERVICE_NAME"

            LOG_GROUPS=$(aws logs describe-log-groups \
              --log-group-name-prefix "$PREFIX" \
              --query "logGroups[*].logGroupName" \
              --output text)

            if [ -z "$LOG_GROUPS" ]; then
              echo "No log groups found for service: $SERVICE_NAME"
              continue
            fi

            echo "The following log groups will be deleted:"
            echo "$LOG_GROUPS" | tr '\t' '\n'

            for LOG_GROUP in $LOG_GROUPS; do
              echo "Deleting log group: $LOG_GROUP"
              aws logs delete-log-group --log-group-name "$LOG_GROUP" --region ${{ vars.AWS_REGION }} 
              if [ $? -eq 0 ]; then
                echo "Successfully deleted: $LOG_GROUP"
              else
                echo "Failed to delete: $LOG_GROUP"
              fi
            done
          done

      - name: Comment on PR about deleted services
        if: steps.identify-inactive.outputs.has_inactive == 'true'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
          INACTIVE_PREVIEWS: ${{ steps.identify-inactive.outputs.inactive_previews }}
        run: |
          echo "$INACTIVE_PREVIEWS" | jq -c '.[] | select(.pr != null)' | while read -r SERVICE; do
           PR_NUMBER=$(echo "$SERVICE" | jq -r '.pr')
           SERVICE_NAME=$(echo "$SERVICE" | jq -r '.name')

           if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
             COMMENT="ðŸ§¹ **Preview Environment Cleanup**

             The preview environment for \`$SERVICE_NAME\` has been automatically deleted due to inactivity (no updates for ${{ inputs.days-to-keep }} days).

             If you need to restore the preview environment, please push a new commit to this PR."

             gh api \
               --method POST \
               -H "Authorization: token $GITHUB_TOKEN" \
               repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/comments \
               -f body="${COMMENT}"

             if [ $? -eq 0 ]; then
               echo "Successfully commented on PR #$PR_NUMBER"
             else
               echo "Failed to comment on PR #$PR_NUMBER"
             fi
           else
             echo "Skipping PR comment for service without valid PR number"
           fi
          done
